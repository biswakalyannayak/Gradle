plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'jacoco'
	id 'org.sonarqube' version '2.8'
	id "java"
}

group = 'com.bk'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.listFiles = true
}
tasks.withType(Test) {
	failFast = true
	ignoreFailures = false
	testLogging.showStandardStreams = true
}


sourceSets {
	//Declaring this source set creates compile time and runtime configurations for it.
	integrationTest {

		java {
			compileClasspath += sourceSets.main.output + sourceSets.test.output
			runtimeClasspath += sourceSets.main.output + sourceSets.test.output
			srcDir file('src/test/java')
			include(["**/*IntegrationTest.java"])
		}
		resources.srcDir file('src/test/resources')
	}
	test {
		java {
			srcDir 'test/java'
			exclude(["**/*IntegrationTest.java"])
		}
		resources.srcDir file('src/test/resources')
	}
}

configurations {
	//Configures compile and runtime configurations for our integration tests and includes the dependencies of the test task.
	integrationTestImplementation.extendsFrom implementation, testImplementation
	integrationTestRuntime.extendsFrom runtimeOnly

	compileOnly {
		extendsFrom annotationProcessor
	}
}


repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'io.projectreactor:reactor-test'
}

jacocoTestReport {
	executionData(file("${project.buildDir}/jacoco/test.exec"),file("${project.buildDir}/jacoco/integrationTest.exec"))
	reports {
		// for sonarqube
		xml.enabled true
		xml.destination(file("${project.buildDir}/reports/jacoco/all-tests/jacocoAllTestReport.xml"))
		// for devs
		html.enabled true
		html.destination file("${project.buildDir}/reports/jacoco/all-tests/html")
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}

test {
	jacoco {
		destinationFile = file("$buildDir/jacoco/test.exec")
	}
	exclude(["**/*IntegrationTest.class"])
	useJUnitPlatform()
}

//Create the task that runs the integration tests found from the configured source directory and uses the correct classpath.
task integrationTest(type: Test) {
	jacoco {
		destinationFile = file("$buildDir/jacoco/integrationTest.exec")
	}
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	//Ensure that our unit tests run before our integration tests
	//mustRunAfter test
}

sonarqube {
	properties {
		property "sonar.sourceEncoding", "UTF-8"
		//FIXME We can provide the sonar host url in build file
		//Change me- property 'sonar.host.url', 'http://localhost:9000'
		//Change me - property "sonar.exclusions", "**/*Generated.java"
		property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/all-tests/jacocoAllTestReport.xml"
	}
}

//Ensure that the check task fails the build if there are failing integration tests.
check.dependsOn jacocoTestCoverageVerification
project.tasks["sonarqube"].dependsOn "jacocoTestReport"

// Below are the additional tasks- not a must run
task printVersion {
	outputs.upToDateWhen { false }
	doLast {
		println  project.version.toString()
	}
}

task printGroup {
	outputs.upToDateWhen { false }
	doLast {
		println project.group.toString()
	}
}

